# backend/api/management/commands/import_data.py
import json
import os
import glob
from django.core.management.base import BaseCommand
from api.models import Season, IPLTeam, IPLPlayer  # Add your other models here

class Command(BaseCommand):
    help = 'Imports data from JSON files generated by export_data command'

    def handle(self, *args, **options):
        # Find all JSON files
        json_files = glob.glob('*.json')
        
        if not json_files:
            self.stdout.write(self.style.WARNING('No JSON files found in the current directory'))
            
            # List all files for debugging
            all_files = os.listdir('.')
            self.stdout.write('Files in current directory:')
            for file in all_files:
                self.stdout.write(f' - {file}')
            
            return
        
        self.stdout.write(f'Found JSON files: {", ".join(json_files)}')
        
        # Define import order and model mappings
        model_map = {
            'seasons.json': Season,
            'teams.json': IPLTeam,
            'players.json': IPLPlayer,
            # Add other models as needed
        }
        
        # Import in specific order to handle dependencies
        import_order = ['seasons.json', 'teams.json', 'players.json']
        
        for filename in import_order:
            if filename in json_files:
                self.import_model(filename, model_map[filename])
        
        # Import any remaining files
        for filename in json_files:
            if filename in model_map and filename not in import_order:
                self.import_model(filename, model_map[filename])
        
        self.stdout.write(self.style.SUCCESS('Import complete.'))
    
    def import_model(self, filename, model_class):
        self.stdout.write(f'Importing {model_class.__name__} from {filename}...')
        
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            self.stdout.write(f'Loaded {len(data)} records from {filename}')
            
            # Clear existing data if needed
            # model_class.objects.all().delete()
            
            # Import records
            count = 0
            for item in data:
                # Extract ID to check if record exists
                record_id = item.get('id')
                
                if record_id:
                    # Try to get existing record
                    try:
                        obj = model_class.objects.get(id=record_id)
                        # Update fields
                        for field, value in item.items():
                            setattr(obj, field, value)
                        obj.save()
                    except model_class.DoesNotExist:
                        # Create new record
                        obj = model_class(**item)
                        obj.save()
                    
                    count += 1
            
            self.stdout.write(f'Imported {count} {model_class.__name__} records')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'Error importing {filename}: {str(e)}'))