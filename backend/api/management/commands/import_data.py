# backend/api/management/commands/import_data.py
import json
import os
import glob
from django.core.management.base import BaseCommand
from api.models import (
    Season, IPLTeam, IPLPlayer, 
    FantasyBoostRole, IPLMatch, IPLPlayerEvent, 
    PlayerTeamHistory, TeamSeason
)

class Command(BaseCommand):
    help = 'Imports data from JSON files generated by export_data command'

    def handle(self, *args, **options):
        # Look for JSON files in multiple possible locations
        possible_paths = [
            '.',                 # Current directory
            './exports',         # Exports subdirectory
            '/app',              # Root app directory
            '/app/exports',      # Exports in root app directory
            os.path.dirname(__file__),  # Directory containing this script
            os.path.join(os.path.dirname(__file__), '../../../exports')  # Relative to script
        ]
        
        # Check each path for JSON files
        json_files = []
        found_path = None
        
        for path in possible_paths:
            self.stdout.write(f'Looking for JSON files in {path}')
            try:
                if os.path.exists(path):
                    file_list = [f for f in os.listdir(path) if f.endswith('.json')]
                    if file_list:
                        json_files = file_list
                        found_path = path
                        self.stdout.write(self.style.SUCCESS(f'Found {len(file_list)} JSON files in {path}'))
                        break
            except Exception as e:
                self.stdout.write(f'Error checking {path}: {str(e)}')
                continue
        
        if not json_files:
            self.stdout.write(self.style.ERROR('No JSON files found in any location!'))
            return
        
        self.stdout.write(f'Found JSON files in {found_path}: {", ".join(json_files)}')
        
        # Define model mappings
        model_map = {
            'seasons.json': Season,
            'teams.json': IPLTeam,
            'players.json': IPLPlayer,
            'fantasy_boost_roles.json': FantasyBoostRole,
            'team_seasons.json': TeamSeason,
            'player_team_history.json': PlayerTeamHistory,
            'ipl_matches.json': IPLMatch,
            'ipl_player_events.json': IPLPlayerEvent,
            # Add other models as needed
        }
        
        # Import in specific order to handle dependencies
        import_order = [
            'seasons.json', 
            'teams.json', 
            'players.json',
            'fantasy_boost_roles.json',
            'team_seasons.json',
            'player_team_history.json',
            'ipl_matches.json',
            'ipl_player_events.json'
        ]
        
        for filename in import_order:
            if filename in json_files:
                full_path = os.path.join(found_path, filename)
                self.import_model(full_path, model_map[filename])
        
        self.stdout.write(self.style.SUCCESS('Import complete.'))
    
    def import_model(self, filepath, model_class):
        self.stdout.write(f'Importing {model_class.__name__} from {filepath}...')
        
        try:
            # Check if file exists
            if not os.path.exists(filepath):
                self.stdout.write(self.style.ERROR(f'File {filepath} does not exist!'))
                return
                
            # Check file size
            file_size = os.path.getsize(filepath)
            self.stdout.write(f'File size: {file_size} bytes')
            
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            self.stdout.write(f'Loaded {len(data)} records from {filepath}')
            
            # Import records
            count = 0
            errors = 0
            for item in data:
                try:
                    # Extract ID to check if record exists
                    record_id = item.get('id')
                    
                    if record_id:
                        # Try to get existing record
                        try:
                            obj = model_class.objects.get(id=record_id)
                            # Update fields
                            for field, value in item.items():
                                setattr(obj, field, value)
                            obj.save()
                        except model_class.DoesNotExist:
                            # Create new record
                            obj = model_class(**item)
                            obj.save()
                        
                        count += 1
                except Exception as e:
                    self.stdout.write(self.style.ERROR(f'Error importing record: {str(e)}'))
                    errors += 1
                    continue
            
            self.stdout.write(f'Imported {count} {model_class.__name__} records ({errors} errors)')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'Error importing {filepath}: {str(e)}'))